// src/services/taskReminderService.ts
import { useNotificationStore } from '@/stores/notification';
import { usePlannerStore } from '@/stores/planner';
import type { PlannerTask } from '@/types/planner';
import type { NotificationPayload } from '@/types/notification';

export class TaskReminderService {
  private static instance: TaskReminderService;
  private intervalId: number | null = null;
  private notifiedTasks: Map<string, Set<number>> = new Map(); // Map pour suivre les t√¢ches d√©j√† notifi√©es
  private checkInterval = 60000; // V√©rifier toutes les minutes (60000 ms)
  private reminderTimes = [20, 15, 10, 5]; // Minutes avant l'√©ch√©ance pour les rappels

  private constructor() {}

  public static getInstance(): TaskReminderService {
    if (!TaskReminderService.instance) {
      TaskReminderService.instance = new TaskReminderService();
    }
    return TaskReminderService.instance;
  }

  /**
   * D√©marrer le service de rappel des t√¢ches
   */
  public start(): void {
    if (this.intervalId !== null) {
      console.warn('Le service de rappel des t√¢ches est d√©j√† en cours d\'ex√©cution');
      return;
    }

    console.log('D√©marrage du service de rappel des t√¢ches');

    // V√©rifier imm√©diatement les t√¢ches du jour
    this.checkTasks();

    // Puis v√©rifier p√©riodiquement
    this.intervalId = window.setInterval(() => {
      this.checkTasks();
    }, this.checkInterval);
  }

  /**
   * Arr√™ter le service de rappel des t√¢ches
   */
  public stop(): void {
    if (this.intervalId !== null) {
      window.clearInterval(this.intervalId);
      this.intervalId = null;
      console.log('Service de rappel des t√¢ches arr√™t√©');
    }
  }

  /**
   * V√©rifier les t√¢ches pour les rappels
   */
  private async checkTasks(): Promise<void> {
    const plannerStore = usePlannerStore();
    const notificationStore = useNotificationStore();

    try {
      // S'assurer que nous avons le planificateur du jour
      if (!plannerStore.todayPlanner) {
        await plannerStore.getTodayPlanner();
      }

      const tasks = plannerStore.todayPlanner?.tasks || [];

      console.log(`V√©rification de ${tasks.length} t√¢ches pour rappels`, tasks);

      if (tasks.length === 0) {
        console.log("Aucune t√¢che trouv√©e pour aujourd'hui");
        return;
      }

      // V√©rifier chaque t√¢che
      tasks.forEach((task: PlannerTask) => {
        // Ignorer les t√¢ches d√©j√† termin√©es ou sans heure d'√©ch√©ance
        if (task.completed || !task.dueTime) {
          console.log(`T√¢che ignor√©e - ${task.id} - ${task.title} - Termin√©e: ${task.completed} - √âch√©ance: ${task.dueTime || 'non d√©finie'}`);
          return;
        }

        // Convertir l'heure d'√©ch√©ance en objet Date
        const [hours, minutes] = task.dueTime.split(':').map(Number);
        const dueDate = new Date();
        dueDate.setHours(hours, minutes, 0, 0);

        // Calculer la diff√©rence en minutes
        const now = new Date();
        const diffMs = dueDate.getTime() - now.getTime();
        const diffMinutes = Math.floor(diffMs / (1000 * 60));

        console.log(`T√¢che: ${task.title} - √âch√©ance: ${task.dueTime} - Minutes restantes: ${diffMinutes}`);

        // Si la t√¢che est d√©j√† en retard, pas besoin de notification
        if (diffMinutes < 0) {
          console.log(`T√¢che en retard - ${task.title}`);
          return;
        }

        // NOUVELLE LOGIQUE : Rappel sp√©cial pour les t√¢ches tr√®s proches de l'√©ch√©ance (‚â§ 3 minutes)
        if (diffMinutes <= 3 && diffMinutes > 0) {
          // V√©rifier si on a d√©j√† notifi√© pour "derni√®re minute"
          this.sendLastMinuteReminder(task, diffMinutes, notificationStore);
          return; // Sortir apr√®s avoir envoy√© ce rappel sp√©cial
        }

        // V√©rification standard pour les autres temps de rappel
        this.reminderTimes.forEach(time => {
          // V√©rifier si nous sommes entre time et time-1 minutes avant l'√©ch√©ance
          if (diffMinutes <= time && diffMinutes > time - 1) {
            console.log(`Envoi d'une notification pour ${task.title} (${diffMinutes} minutes restantes)`);
            this.sendTaskReminder(task, time, notificationStore);
          }
        });
      });
    } catch (error) {
      console.error('Erreur lors de la v√©rification des t√¢ches pour les rappels:', error);
    }
  }

  private sendLastMinuteReminder(task: PlannerTask, minutesLeft: number, notificationStore: any): void {
    // V√©rifier si la t√¢che a un ID valide
    if (!task.id) {
      console.error('Impossible d\'envoyer un rappel pour une t√¢che sans ID');
      return;
    }

    console.log(`Pr√©paration du rappel URGENT pour la t√¢che ${task.id} - ${task.title} (${minutesLeft} min)`);

    // Cr√©er une cl√© sp√©ciale pour ce type de rappel
    const lastMinuteKey = "last_minute";

    // V√©rifier si cette notification a d√©j√† √©t√© envoy√©e
    if (!this.notifiedTasks.has(task.id)) {
      this.notifiedTasks.set(task.id, new Set());
    }

    const taskNotifications = this.notifiedTasks.get(task.id)!;

    // Si d√©j√† notifi√© pour derni√®re minute, ne pas renvoyer
    if (taskNotifications.has(-1)) { // Utilisation de -1 comme marqueur sp√©cial
      console.log(`Rappel de derni√®re minute d√©j√† envoy√© pour la t√¢che ${task.id}`);
      return;
    }

    // Message adapt√© au temps restant
    let message = '';
    if (minutesLeft === 1) {
      message = `URGENT: "${task.title}" - Il ne reste plus qu'1 minute avant l'√©ch√©ance !`;
    } else {
      message = `URGENT: "${task.title}" - Il ne reste plus que ${minutesLeft} minutes avant l'√©ch√©ance !`;
    }

    // Cr√©er la notification avec priorit√© diff√©rente
    const notification: NotificationPayload = {
      type: 'warning', // Utiliser warning au lieu de reminder pour un style diff√©rent
      content: message,
      link: '/planner/today'
    };

    console.log(`Envoi de la notification URGENTE:`, notification);

    // Envoyer la notification
    notificationStore.createNotification(notification)
      .then(() => {
        console.log(`üö® Notification URGENTE envoy√©e avec succ√®s pour ${task.title}`);
        // Marquer comme notifi√©e avec un marqueur sp√©cial
        taskNotifications.add(-1);
      })
      .catch((error: unknown) => {
        console.error(`‚ùå Erreur lors de la cr√©ation de la notification URGENTE pour ${task.title}:`, error);
      });
  }

  /**
   * Envoyer un rappel pour une t√¢che
   */
  private sendTaskReminder(task: PlannerTask, minutesLeft: number, notificationStore: any): void {
    // V√©rifier si la t√¢che a un ID valide
    if (!task.id) {
      console.error('Impossible d\'envoyer un rappel pour une t√¢che sans ID');
      return;
    }

    console.log(`Pr√©paration du rappel pour la t√¢che ${task.id} - ${task.title} (${minutesLeft} min)`);

    // V√©rifier si cette notification a d√©j√† √©t√© envoy√©e
    if (!this.notifiedTasks.has(task.id)) {
      this.notifiedTasks.set(task.id, new Set());
      console.log(`Nouvelle entr√©e cr√©√©e pour les rappels de la t√¢che ${task.id}`);
    }

    const taskNotifications = this.notifiedTasks.get(task.id)!;

    // Si d√©j√† notifi√© pour ce temps, ne pas renvoyer
    if (taskNotifications.has(minutesLeft)) {
      console.log(`Rappel d√©j√† envoy√© pour la t√¢che ${task.id} √† ${minutesLeft} minutes`);
      return;
    }

    // Cr√©er la notification
    const notification: NotificationPayload = {
      type: 'reminder',
      content: `Rappel: "${task.title}" - Il vous reste ${minutesLeft} minutes avant l'√©ch√©ance`,
      link: '/planner/today' // Lien vers le planificateur du jour
    };

    console.log(`Envoi de la notification:`, notification);

    // Envoyer la notification
    notificationStore.createNotification(notification)
    .then(() => {
      console.log(`‚úÖ Notification de rappel envoy√©e avec succ√®s pour ${task.title}`);
      // Marquer comme notifi√©e seulement apr√®s le succ√®s
      taskNotifications.add(minutesLeft);
    })
    .catch((error: unknown) => {
      // TypeScript exige que nous typions l'erreur comme unknown
      console.error(`‚ùå Erreur lors de la cr√©ation de la notification de rappel pour ${task.title}:`, error);
      // On peut ajouter des v√©rifications de type si n√©cessaire
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
      }
    });
  }
  /**
   * V√©rifier imm√©diatement les t√¢ches (utile pour les tests)
   */
  public checkTasksNow(): void {
    this.checkTasks();
  }
}

export default TaskReminderService.getInstance();
